/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example.demo.generated.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.springframework.validation.annotation.Validated
@org.apache.avro.specific.AvroGenerated
public class Exemplo extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 5867794775732840043L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Exemplo\",\"namespace\":\"com.example.demo.generated.avro\",\"fields\":[{\"name\":\"numero\",\"type\":{\"type\":\"int\",\"logicalType\":\"range\",\"ranges\":[{\"min\":0,\"max\":50}]},\"doc\":\"Um inteiro entre 0 e 50.\",\"default\":0,\"javaAnnotation\":\"jakarta.validation.constraints.Min.List({ @jakarta.validation.constraints.Min(value = 0, message = \\\"O valor deve ser no mínimo 0\\\")}) @jakarta.validation.constraints.Max.List({@jakarta.validation.constraints.Max(value = 50, message = \\\"O valor deve ser no máximo 50\\\")})\"},{\"name\":\"indicador\",\"type\":{\"type\":\"int\",\"logicalType\":\"range\",\"ranges\":[{\"min\":0,\"max\":50},{\"min\":100,\"max\":150}]},\"doc\":\"Um inteiro entre 0 e 50 ou entre 100 e 150.\",\"default\":0,\"javaAnnotation\":\"jakarta.validation.constraints.Min.List({ @jakarta.validation.constraints.Min(value = 0, message = \\\"O valor deve ser no mínimo 0\\\"), @jakarta.validation.constraints.Min(value = 100, message = \\\"O valor deve ser no mínimo 100 se for maior que 50\\\")})\\n@jakarta.validation.constraints.Max.List({@jakarta.validation.constraints.Max(value = 50, message = \\\"O valor deve ser no máximo 50\\\"), @jakarta.validation.constraints.Max(value = 150, message = \\\"O valor deve ser no máximo 150\\\")})\"},{\"name\":\"texto\",\"type\":\"string\",\"doc\":\"Uma string que suporta até 50 caracteres.\",\"maxLength\":50,\"javaAnnotation\":\"jakarta.validation.constraints.Size(max = 50, message = \\\"O texto não pode ter mais de 50 caracteres.\\\")\"}],\"javaAnnotation\":\"org.springframework.validation.annotation.Validated\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<Exemplo> ENCODER =
      new BinaryMessageEncoder<Exemplo>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Exemplo> DECODER =
      new BinaryMessageDecoder<Exemplo>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Exemplo> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Exemplo> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Exemplo> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Exemplo>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Exemplo to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Exemplo from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Exemplo instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Exemplo fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Um inteiro entre 0 e 50. */
  @jakarta.validation.constraints.Min.List({ @jakarta.validation.constraints.Min(value = 0, message = "O valor deve ser no mínimo 0")}) @jakarta.validation.constraints.Max.List({@jakarta.validation.constraints.Max(value = 50, message = "O valor deve ser no máximo 50")})
   private int numero;
  /** Um inteiro entre 0 e 50 ou entre 100 e 150. */
  @jakarta.validation.constraints.Min.List({ @jakarta.validation.constraints.Min(value = 0, message = "O valor deve ser no mínimo 0"), @jakarta.validation.constraints.Min(value = 100, message = "O valor deve ser no mínimo 100 se for maior que 50")})
@jakarta.validation.constraints.Max.List({@jakarta.validation.constraints.Max(value = 50, message = "O valor deve ser no máximo 50"), @jakarta.validation.constraints.Max(value = 150, message = "O valor deve ser no máximo 150")})
   private int indicador;
  /** Uma string que suporta até 50 caracteres. */
  @jakarta.validation.constraints.Size(max = 50, message = "O texto não pode ter mais de 50 caracteres.")
   private java.lang.CharSequence texto;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Exemplo() {}

  /**
   * All-args constructor.
   * @param numero Um inteiro entre 0 e 50.
   * @param indicador Um inteiro entre 0 e 50 ou entre 100 e 150.
   * @param texto Uma string que suporta até 50 caracteres.
   */
  public Exemplo(java.lang.Integer numero, java.lang.Integer indicador, java.lang.CharSequence texto) {
    this.numero = numero;
    this.indicador = indicador;
    this.texto = texto;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return numero;
    case 1: return indicador;
    case 2: return texto;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: numero = (java.lang.Integer)value$; break;
    case 1: indicador = (java.lang.Integer)value$; break;
    case 2: texto = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'numero' field.
   * @return Um inteiro entre 0 e 50.
   */
  public int getNumero() {
    return numero;
  }


  /**
   * Sets the value of the 'numero' field.
   * Um inteiro entre 0 e 50.
   * @param value the value to set.
   */
  public void setNumero(int value) {
    this.numero = value;
  }

  /**
   * Gets the value of the 'indicador' field.
   * @return Um inteiro entre 0 e 50 ou entre 100 e 150.
   */
  public int getIndicador() {
    return indicador;
  }


  /**
   * Sets the value of the 'indicador' field.
   * Um inteiro entre 0 e 50 ou entre 100 e 150.
   * @param value the value to set.
   */
  public void setIndicador(int value) {
    this.indicador = value;
  }

  /**
   * Gets the value of the 'texto' field.
   * @return Uma string que suporta até 50 caracteres.
   */
  public java.lang.CharSequence getTexto() {
    return texto;
  }


  /**
   * Sets the value of the 'texto' field.
   * Uma string que suporta até 50 caracteres.
   * @param value the value to set.
   */
  public void setTexto(java.lang.CharSequence value) {
    this.texto = value;
  }

  /**
   * Creates a new Exemplo RecordBuilder.
   * @return A new Exemplo RecordBuilder
   */
  public static com.example.demo.generated.avro.Exemplo.Builder newBuilder() {
    return new com.example.demo.generated.avro.Exemplo.Builder();
  }

  /**
   * Creates a new Exemplo RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Exemplo RecordBuilder
   */
  public static com.example.demo.generated.avro.Exemplo.Builder newBuilder(com.example.demo.generated.avro.Exemplo.Builder other) {
    if (other == null) {
      return new com.example.demo.generated.avro.Exemplo.Builder();
    } else {
      return new com.example.demo.generated.avro.Exemplo.Builder(other);
    }
  }

  /**
   * Creates a new Exemplo RecordBuilder by copying an existing Exemplo instance.
   * @param other The existing instance to copy.
   * @return A new Exemplo RecordBuilder
   */
  public static com.example.demo.generated.avro.Exemplo.Builder newBuilder(com.example.demo.generated.avro.Exemplo other) {
    if (other == null) {
      return new com.example.demo.generated.avro.Exemplo.Builder();
    } else {
      return new com.example.demo.generated.avro.Exemplo.Builder(other);
    }
  }

  /**
   * RecordBuilder for Exemplo instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Exemplo>
    implements org.apache.avro.data.RecordBuilder<Exemplo> {

    /** Um inteiro entre 0 e 50. */
    private int numero;
    /** Um inteiro entre 0 e 50 ou entre 100 e 150. */
    private int indicador;
    /** Uma string que suporta até 50 caracteres. */
    private java.lang.CharSequence texto;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.demo.generated.avro.Exemplo.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.numero)) {
        this.numero = data().deepCopy(fields()[0].schema(), other.numero);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.indicador)) {
        this.indicador = data().deepCopy(fields()[1].schema(), other.indicador);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.texto)) {
        this.texto = data().deepCopy(fields()[2].schema(), other.texto);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing Exemplo instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.demo.generated.avro.Exemplo other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.numero)) {
        this.numero = data().deepCopy(fields()[0].schema(), other.numero);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.indicador)) {
        this.indicador = data().deepCopy(fields()[1].schema(), other.indicador);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.texto)) {
        this.texto = data().deepCopy(fields()[2].schema(), other.texto);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'numero' field.
      * Um inteiro entre 0 e 50.
      * @return The value.
      */
    public int getNumero() {
      return numero;
    }


    /**
      * Sets the value of the 'numero' field.
      * Um inteiro entre 0 e 50.
      * @param value The value of 'numero'.
      * @return This builder.
      */
    public com.example.demo.generated.avro.Exemplo.Builder setNumero(int value) {
      validate(fields()[0], value);
      this.numero = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'numero' field has been set.
      * Um inteiro entre 0 e 50.
      * @return True if the 'numero' field has been set, false otherwise.
      */
    public boolean hasNumero() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'numero' field.
      * Um inteiro entre 0 e 50.
      * @return This builder.
      */
    public com.example.demo.generated.avro.Exemplo.Builder clearNumero() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'indicador' field.
      * Um inteiro entre 0 e 50 ou entre 100 e 150.
      * @return The value.
      */
    public int getIndicador() {
      return indicador;
    }


    /**
      * Sets the value of the 'indicador' field.
      * Um inteiro entre 0 e 50 ou entre 100 e 150.
      * @param value The value of 'indicador'.
      * @return This builder.
      */
    public com.example.demo.generated.avro.Exemplo.Builder setIndicador(int value) {
      validate(fields()[1], value);
      this.indicador = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'indicador' field has been set.
      * Um inteiro entre 0 e 50 ou entre 100 e 150.
      * @return True if the 'indicador' field has been set, false otherwise.
      */
    public boolean hasIndicador() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'indicador' field.
      * Um inteiro entre 0 e 50 ou entre 100 e 150.
      * @return This builder.
      */
    public com.example.demo.generated.avro.Exemplo.Builder clearIndicador() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'texto' field.
      * Uma string que suporta até 50 caracteres.
      * @return The value.
      */
    public java.lang.CharSequence getTexto() {
      return texto;
    }


    /**
      * Sets the value of the 'texto' field.
      * Uma string que suporta até 50 caracteres.
      * @param value The value of 'texto'.
      * @return This builder.
      */
    public com.example.demo.generated.avro.Exemplo.Builder setTexto(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.texto = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'texto' field has been set.
      * Uma string que suporta até 50 caracteres.
      * @return True if the 'texto' field has been set, false otherwise.
      */
    public boolean hasTexto() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'texto' field.
      * Uma string que suporta até 50 caracteres.
      * @return This builder.
      */
    public com.example.demo.generated.avro.Exemplo.Builder clearTexto() {
      texto = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Exemplo build() {
      try {
        Exemplo record = new Exemplo();
        record.numero = fieldSetFlags()[0] ? this.numero : (java.lang.Integer) defaultValue(fields()[0]);
        record.indicador = fieldSetFlags()[1] ? this.indicador : (java.lang.Integer) defaultValue(fields()[1]);
        record.texto = fieldSetFlags()[2] ? this.texto : (java.lang.CharSequence) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Exemplo>
    WRITER$ = (org.apache.avro.io.DatumWriter<Exemplo>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Exemplo>
    READER$ = (org.apache.avro.io.DatumReader<Exemplo>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.numero);

    out.writeInt(this.indicador);

    out.writeString(this.texto);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.numero = in.readInt();

      this.indicador = in.readInt();

      this.texto = in.readString(this.texto instanceof Utf8 ? (Utf8)this.texto : null);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.numero = in.readInt();
          break;

        case 1:
          this.indicador = in.readInt();
          break;

        case 2:
          this.texto = in.readString(this.texto instanceof Utf8 ? (Utf8)this.texto : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










